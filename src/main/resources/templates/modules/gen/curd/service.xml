<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>service</name>
	<filePath>src/main/java/${packageName}/${moduleName}/service/${subModuleName}</filePath>
	<fileName>${ClassName}Service.java</fileName>
	<content><![CDATA[
/*
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.service.BusinessService;
import com.thinkgem.jeesite.common.service.ExtCrudService;
import com.thinkgem.jeesite.modules.gsp.service.exception.BusinessException;
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.dao<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Dao;

/**
 * ${functionName}Service
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
<#if !extended?? || !extended >
@Service
@Transactional(readOnly = true)
</#if>
public class ${ClassName}Service extends ExtCrudService<${ClassName}Dao, ${ClassName}> {

	@SuppressWarnings({"MismatchedQueryAndUpdateOfCollection", "SpringAutowiredFieldsWarningInspection"})
	@Autowired(required=false)
	private List<BusinessService<${ClassName}>> businessServices = new ArrayList<>();

    @Autowired
    public ${ClassName}Service(
            ${ClassName}Dao dao) {
        super(dao);
    }

	public ${ClassName} get(String id) {
		//执行保存前的业务代码
		for(BusinessService<${ClassName}> businessService : businessServices){
			businessService.preFetch(id);
		}
		${ClassName} ${className} = super.get(id);
		
		//执行保存后的业务代码
		for(BusinessService<${ClassName}> businessService : businessServices){
			 businessService.postFetch(${className});
		}

		return ${className};
	}
	
	public List<${ClassName}> findList(${ClassName} ${className}) {
		return super.findList(${className});
	}
	
	public Page<${ClassName}> findPage(Page<${ClassName}> page, ${ClassName} ${className}) {
		//执行保存前的业务代码
		for(BusinessService<${ClassName}> businessService : businessServices){
			 businessService.prePaging(page,${className});
		}
		Page<${ClassName}> paginator = super.findPage(page, ${className});
		//执行保存后的业务代码
		for(BusinessService<${ClassName}> businessService : businessServices){
			businessService.postPaging(paginator);
		}
		return paginator;
	}

	@Transactional
	public void save(${ClassName} ${className}) throws BusinessException {
		boolean isNewRecord = ${className}.getIsNewRecord();
		//执行保存前的业务代码
		for(BusinessService<${ClassName}> businessService : businessServices){
			if(!isNewRecord){
				businessService.preUpdate(${className});
			}else{
				businessService.preInsert(${className});
			}
		}
		//执行保存操作
		super.save(${className});
		//执行保存后的业务代码
		for(BusinessService<${ClassName}> businessService : businessServices){
			if(!isNewRecord){
				businessService.postUpdate(${className});
			}else{
				businessService.postInsert(${className});
			}
		}
	}
	
	@Transactional
	public void delete(${ClassName} ${className}) {
		//执行保存前的业务代码
		for(BusinessService<${ClassName}> businessService : businessServices){
			businessService.preDelete(${className});
		}
		//删除
		super.delete(${className});
		//执行保存前的业务代码
		for(BusinessService<${ClassName}> businessService : businessServices){
			businessService.postDelete(${className});
		}
	}
	
}]]>
	</content>
</template>